/**
 * This file is part of Vampire Editor.
 *
 * Vampire Editor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vampire Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Vampire Editor. If not, see <http://www.gnu.org/licenses/>.
 *
 * @package Vampire Editor
 * @author Marian Pollzien <map@wafriv.de>
 * @copyright (c) 2018, Marian Pollzien
 * @license https://www.gnu.org/licenses/lgpl.html LGPLv3
 */
package vampireEditor.gui;

import java.awt.*;
import java.awt.event.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import vampireEditor.Configuration;
import vampireEditor.language.LanguageInterface;

/**
 *
 * @author Marian Pollzien
 */
public class NewCharacterDialog extends javax.swing.JDialog {

    private final Configuration configuration;
    private final LanguageInterface language;
    private int maxActiveTab = 0;
    private LooksPanel looksPanel;
    private AttributesPanel attributesPanel;
    private AbilitiesPanel abilitiesPanel;
    private BenefitsPanel benefitsPanel;

    /**
     * Creates new form NewCharacterDialog
     */
    public NewCharacterDialog() {
        this((Frame) null, false);
    }

    /**
     * Creates new form NewCharacterDialog
     *
     * @param parent
     * @param modal
     */
    public NewCharacterDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        this.configuration = new Configuration();
        this.configuration.loadProperties();
        this.language = this.configuration.getLanguageObject();

        this.initComponents();
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundGroupTemplate = new javax.swing.ButtonGroup();
        cancelButton = new javax.swing.JButton();
        characterTabPane = new javax.swing.JTabbedPane();
        freeAdditionalPointsTextField = new javax.swing.JTextField();
        freeAdditionalMaxPointsTextField = new javax.swing.JTextField();
        freeAdditionalPointsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        this.looksPanel = new LooksPanel(this, this.configuration);
        characterTabPane.add(this.looksPanel);
        this.attributesPanel = new AttributesPanel(this, this.configuration);
        characterTabPane.add(this.attributesPanel);
        this.abilitiesPanel = new AbilitiesPanel(this, this.configuration);
        characterTabPane.add(this.abilitiesPanel);
        this.benefitsPanel = new BenefitsPanel(this, this.configuration);
        characterTabPane.add(this.benefitsPanel);

        characterTabPane.setEnabledAt(1, false);
        characterTabPane.setEnabledAt(2, false);
        //characterTabPane.setEnabledAt(3, false);

        freeAdditionalPointsTextField.setText("0");
        freeAdditionalPointsTextField.setEnabled(false);

        freeAdditionalMaxPointsTextField.setText("15");
        freeAdditionalMaxPointsTextField.setEnabled(false);

        freeAdditionalPointsLabel.setText("Free additional points");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(characterTabPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(freeAdditionalPointsLabel)
                .addGap(18, 18, 18)
                .addComponent(freeAdditionalPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(freeAdditionalMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(characterTabPane)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(freeAdditionalPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(freeAdditionalMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(freeAdditionalPointsLabel))
                    .addComponent(cancelButton))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Set the maximum value for the attribute spinners.
     *
     * @param maximum
     */
    public void setAttributeMaximum(int maximum) {
        this.attributesPanel.setAttributeMaximum(maximum);
        this.abilitiesPanel.setAttributeMaximum(maximum);
    }

    /**
     * Get the tabbed pane inside this dialog.
     *
     * @return
     */
    public JTabbedPane getCharacterTabPane() {
        return characterTabPane;
    }

    /**
     * Init everything.
     */
    private void init() {
        // Set look and feel.
        try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(NewCharacterDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        BaseWindow.installEscapeCloseOperation(this);
        this.setFieldTexts();
    }

    /**
     * Set the texts of every field.
     */
    private void setFieldTexts() {
        this.setTitle(this.language.translate("newCharacter"));
        this.cancelButton.setText(this.language.translate("cancel"));
        this.freeAdditionalPointsLabel.setText(this.language.translate("freeAdditionalPoints"));

        this.characterTabPane.setTitleAt(0, this.language.translate("looks"));
        this.characterTabPane.setTitleAt(1, this.language.translate("attributes"));
        this.characterTabPane.setTitleAt(2, this.language.translate("abilities"));
        this.characterTabPane.setTitleAt(3, this.language.translate("benefits"));
    }

    /**
     * Increase the current maximum active tab.
     */
    public void increaseMaxActiveTab() {
        this.maxActiveTab++;
    }

    /**
     * Get the current maximum active tab.
     *
     * @return
     */
    public int getMaxActiveTab() {
        return this.maxActiveTab;
    }

    /**
     * Calculate and return the sum of points spent for physical attributes.
     *
     * @return
     */
    private int getPhysicalPointsSum() {
        return this.attributesPanel.getPhysicalPointsSum();
    }

    /**
     * Check if the spent points for physical attributes is above its maximum.
     *
     * @return
     */
    private boolean checkPhysicalPoints() {
        return this.attributesPanel.checkPhysicalPoints();
    }

    /**
     * Get the maximum points available for physical attributes.
     *
     * @return
     */
    private int getPhysicalMaxPoints() {
        return this.attributesPanel.getPhysicalMaxPoints();
    }

    /**
     * Calculate and return the sum of points spent for social attributes.
     *
     * @return
     */
    private int getSocialPointsSum() {
        return this.attributesPanel.getSocialPointsSum();
    }

    /**
     * Check if the spent points for social attributes is above its maximum.
     *
     * @return
     */
    private boolean checkSocialPoints() {
        return this.attributesPanel.checkSocialPoints();
    }

    /**
     * Get the maximum points available for social attributes.
     *
     * @return
     */
    private int getSocialMaxPoints() {
        return this.attributesPanel.getSocialMaxPoints();
    }

    /**
     * Calculate and return the sum of points spent for mental attributes.
     *
     * @return
     */
    private int getMentalPointsSum() {
        return this.attributesPanel.getMentalPointsSum();
    }

    /**
     * Check if the spent points for mental attributes is above its maximum.
     *
     * @return
     */
    private boolean checkMentalPoints() {
        return this.attributesPanel.checkMentalPoints();
    }

    /**
     * Get the maximum points available for mental attributes.
     *
     * @return
     */
    private int getMentalMaxPoints() {
        return this.attributesPanel.getMentalMaxPoints();
    }

    /**
     * Calculate and return the sum of points spent for talents.
     *
     * @return
     */
    private int getTalentPointsSum() {
        return this.abilitiesPanel.getTalentPointsSum();
    }

    /**
     * Check if the spent points for talents is above its maximum.
     *
     * @return
     */
    private boolean checkTalentPoints() {
        return this.abilitiesPanel.checkTalentPoints();
    }

    /**
     * Get the maximum points available for talents.
     *
     * @return
     */
    private int getTalentMaxPoints() {
        return this.abilitiesPanel.getTalentMaxPoints();
    }

    /**
     * Calculate and return the sum of points spent for skills.
     *
     * @return
     */
    private int getSkillPointsSum() {
        return this.abilitiesPanel.getSkillPointsSum();
    }

    /**
     * Check if the spent points for skills is above its maximum.
     *
     * @return
     */
    private boolean checkSkillPoints() {
        return this.abilitiesPanel.checkSkillPoints();
    }

    /**
     * Get the maximum points available for skills.
     *
     * @return
     */
    private int getSkillMaxPoints() {
        return this.abilitiesPanel.getSkillMaxPoints();
    }

    /**
     * Calculate and return the sum of points spent for knowledges.
     *
     * @return
     */
    private int getKnowledgePointsSum() {
        return this.abilitiesPanel.getKnowledgePointsSum();
    }

    /**
     * Check if the spent points for knowledges is above its maximum.
     *
     * @return
     */
    private boolean checkKnowledgePoints() {
        return this.abilitiesPanel.checkKnowledgePoints();
    }

    /**
     * Get the maximum points available for knowledges.
     *
     * @return
     */
    private int getKnowledgeMaxPoints() {
        return this.abilitiesPanel.getKnowledgeMaxPoints();
    }

    /**
     * Calculate the used free additional points.
     */
    public void calculateUsedFreeAdditionalPoints() {
        int freeMaximum = Integer.parseInt(this.freeAdditionalMaxPointsTextField.getText());
        int freeSum = 0;

        if (this.checkPhysicalPoints()) {
            freeSum += (this.getPhysicalPointsSum() - this.getPhysicalMaxPoints()) * 5;
        }

        if (this.checkSocialPoints()) {
            freeSum += (this.getSocialPointsSum() - this.getSocialMaxPoints()) * 5;
        }

        if (this.checkMentalPoints()) {
            freeSum += (this.getMentalPointsSum() - this.getMentalMaxPoints()) * 5;
        }

        if (this.checkTalentPoints()) {
            freeSum += (this.getTalentPointsSum() - this.getTalentMaxPoints()) * 2;
        }

        if (this.checkSkillPoints()) {
            freeSum += (this.getSkillPointsSum() - this.getSkillMaxPoints()) * 2;
        }

        if (this.checkKnowledgePoints()) {
            freeSum += (this.getKnowledgePointsSum() - this.getKnowledgeMaxPoints()) * 2;
        }

        this.freeAdditionalPointsTextField.setText(Integer.toString(freeSum));

        if (freeSum > freeMaximum) {
            this.freeAdditionalPointsLabel.setForeground(Color.red);
        } else {
            this.freeAdditionalPointsLabel.setForeground(Color.DARK_GRAY);
        }
    }

    /**
     * Get the sexes for showing them in the form.
     *
     * @return
     */
    public DefaultComboBoxModel getWeightings() {
        return new DefaultComboBoxModel(Weighting.values());
    }

    // <editor-fold defaultstate="collapsed" desc="Generated variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup backgroundGroupTemplate;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTabbedPane characterTabPane;
    private javax.swing.JTextField freeAdditionalMaxPointsTextField;
    private javax.swing.JLabel freeAdditionalPointsLabel;
    private javax.swing.JTextField freeAdditionalPointsTextField;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
