/**
 * This file is part of Vampire Editor.
 *
 * Vampire Editor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Vampire Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Vampire Editor. If not, see <http://www.gnu.org/licenses/>.
 *
 * @package Vampire Editor
 * @author Marian Pollzien <map@wafriv.de>
 * @copyright (c) 2018, Marian Pollzien
 * @license https://www.gnu.org/licenses/lgpl.html LGPLv3
 */
package vampireEditor.gui;

import java.awt.Component;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.text.DefaultFormatter;
import vampireEditor.Configuration;
import vampireEditor.language.LanguageInterface;

/**
 *
 * @author Marian Pollzien
 */
public class AttributesPanel extends javax.swing.JPanel {

    private final Configuration configuration;
    private final LanguageInterface language;
    private final NewCharacterDialog parent;
    private ComponentDocumentListener documentListener;

    /**
     * Creates new form attributesPanel
     *
     * @param parent
     * @param configuration
     */
    public AttributesPanel(NewCharacterDialog parent, Configuration configuration) {
        super();
        this.parent = parent;
        this.configuration = configuration;
        this.language = this.configuration.getLanguageObject();

        this.initComponents();
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manipulationField = new javax.swing.JSpinner();
        appearanceLabel = new javax.swing.JLabel();
        appearanceField = new javax.swing.JSpinner();
        charismaLabel = new javax.swing.JLabel();
        intelligenceField = new javax.swing.JSpinner();
        perceptionLabel = new javax.swing.JLabel();
        perceptionField = new javax.swing.JSpinner();
        witsLabel = new javax.swing.JLabel();
        witsField = new javax.swing.JSpinner();
        nextButton = new javax.swing.JButton();
        intelligenceLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        physicalWeightingComboBox = new javax.swing.JComboBox<>();
        physicalLabel = new javax.swing.JLabel();
        socialWeightingComboBox = new javax.swing.JComboBox<>();
        socialLabel = new javax.swing.JLabel();
        mentalWeightingComboBox = new javax.swing.JComboBox<>();
        mentalLabel = new javax.swing.JLabel();
        physicalPointsTextField = new javax.swing.JTextField();
        strengthLabel = new javax.swing.JLabel();
        strengthField = new javax.swing.JSpinner();
        physicalMaxPointsTextField = new javax.swing.JTextField();
        socialPointsTextField = new javax.swing.JTextField();
        dexterityLabel = new javax.swing.JLabel();
        socialMaxPointsTextField = new javax.swing.JTextField();
        dexterityField = new javax.swing.JSpinner();
        mentalPointsTextField = new javax.swing.JTextField();
        staminaLabel = new javax.swing.JLabel();
        mentalMaxPointsTextField = new javax.swing.JTextField();
        staminaField = new javax.swing.JSpinner();
        charismaField = new javax.swing.JSpinner();
        manipulationLabel = new javax.swing.JLabel();

        this.addChangeListener(manipulationField);
        manipulationField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        appearanceLabel.setText("Appearance");

        this.addChangeListener(appearanceField);
        appearanceField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        charismaLabel.setText("Charisma");

        this.addChangeListener(intelligenceField);
        intelligenceField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        perceptionLabel.setText("Perception");

        this.addChangeListener(perceptionField);
        perceptionField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        witsLabel.setText("Wits");

        this.addChangeListener(witsField);
        witsField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        intelligenceLabel.setText("Intelligence");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        physicalWeightingComboBox.setModel(new DefaultComboBoxModel(Weighting.values()));
        physicalWeightingComboBox.setSelectedIndex(0);
        physicalWeightingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                physicalWeightingComboBoxActionPerformed(evt);
            }
        });

        physicalLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        physicalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        physicalLabel.setText("Physical");

        socialWeightingComboBox.setModel(new DefaultComboBoxModel(Weighting.values()));
        socialWeightingComboBox.setSelectedIndex(1);
        socialWeightingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                socialWeightingComboBoxActionPerformed(evt);
            }
        });

        socialLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        socialLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        socialLabel.setText("Social");

        mentalWeightingComboBox.setModel(new DefaultComboBoxModel(Weighting.values()));
        mentalWeightingComboBox.setSelectedIndex(2);
        mentalWeightingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mentalWeightingComboBoxActionPerformed(evt);
            }
        });

        mentalLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mentalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mentalLabel.setText("Mental");

        physicalPointsTextField.setText("0");
        physicalPointsTextField.setEnabled(false);

        strengthLabel.setText("Strength");

        this.addChangeListener(strengthField);
        strengthField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        physicalMaxPointsTextField.setText("7");
        physicalMaxPointsTextField.setEnabled(false);

        socialPointsTextField.setText("0");
        socialPointsTextField.setEnabled(false);

        dexterityLabel.setText("Dexterity");

        socialMaxPointsTextField.setText("5");
        socialMaxPointsTextField.setEnabled(false);

        this.addChangeListener(dexterityField);
        dexterityField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        mentalPointsTextField.setText("0");
        mentalPointsTextField.setEnabled(false);

        staminaLabel.setText("Stamina");

        mentalMaxPointsTextField.setText("3");
        mentalMaxPointsTextField.setEnabled(false);

        this.addChangeListener(staminaField);
        staminaField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        this.addChangeListener(charismaField);
        charismaField.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        manipulationLabel.setText("Manipulation");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(strengthLabel)
                                    .addComponent(dexterityLabel)
                                    .addComponent(staminaLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 76, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(staminaField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(strengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dexterityField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(physicalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(physicalPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(physicalMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(physicalWeightingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(charismaLabel)
                                    .addComponent(appearanceLabel)
                                    .addComponent(manipulationLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(appearanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(charismaField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(manipulationField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(socialLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(socialPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(socialMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(socialWeightingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(witsLabel)
                                    .addComponent(perceptionLabel)
                                    .addComponent(intelligenceLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(perceptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(intelligenceField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(witsField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(mentalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(67, 67, 67))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(mentalPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(mentalMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(mentalWeightingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(physicalLabel)
                    .addComponent(socialLabel)
                    .addComponent(mentalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(physicalWeightingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(socialWeightingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mentalWeightingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strengthLabel)
                    .addComponent(strengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(charismaLabel)
                    .addComponent(charismaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intelligenceLabel)
                    .addComponent(intelligenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dexterityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dexterityLabel)
                    .addComponent(appearanceLabel)
                    .addComponent(appearanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perceptionLabel)
                    .addComponent(perceptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staminaLabel)
                    .addComponent(staminaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manipulationLabel)
                    .addComponent(manipulationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(witsLabel)
                    .addComponent(witsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mentalPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mentalMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(physicalPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(physicalMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(socialPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(socialMaxPointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 282, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(backButton))
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        this.parent.getCharacterTabPane().setSelectedIndex(this.parent.getCharacterTabPane().getSelectedIndex() + 1);
    }//GEN-LAST:event_nextButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.parent.getCharacterTabPane().setSelectedIndex(this.parent.getCharacterTabPane().getSelectedIndex() - 1);
    }//GEN-LAST:event_backButtonActionPerformed

    private void physicalWeightingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_physicalWeightingComboBoxActionPerformed
        this.switchWeightings(
            this.physicalWeightingComboBox,
            this.socialWeightingComboBox,
            this.mentalWeightingComboBox
        );
        Weighting weighting = ((Weighting) this.physicalWeightingComboBox.getSelectedItem());
        this.physicalMaxPointsTextField.setText(Integer.toString(weighting.getAttributeMax()));
        this.parent.calculateUsedFreeAdditionalPoints();
    }//GEN-LAST:event_physicalWeightingComboBoxActionPerformed

    private void socialWeightingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_socialWeightingComboBoxActionPerformed
        this.switchWeightings(
            this.socialWeightingComboBox,
            this.physicalWeightingComboBox,
            this.mentalWeightingComboBox
        );
        Weighting weighting = ((Weighting) this.socialWeightingComboBox.getSelectedItem());
        this.socialMaxPointsTextField.setText(Integer.toString(weighting.getAttributeMax()));
        this.parent.calculateUsedFreeAdditionalPoints();
    }//GEN-LAST:event_socialWeightingComboBoxActionPerformed

    private void mentalWeightingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mentalWeightingComboBoxActionPerformed
        this.switchWeightings(
            this.mentalWeightingComboBox,
            this.physicalWeightingComboBox,
            this.socialWeightingComboBox
        );
        Weighting weighting = ((Weighting) this.mentalWeightingComboBox.getSelectedItem());
        this.mentalMaxPointsTextField.setText(Integer.toString(weighting.getAttributeMax()));
        this.parent.calculateUsedFreeAdditionalPoints();
    }//GEN-LAST:event_mentalWeightingComboBoxActionPerformed

    /**
     * Init everything.
     */
    private void init() {
        this.setFieldTexts();
        this.createFocusTraversalPolicy();
    }

    /**
     * Set the translated texts for the fields and labels on the attributes tab.
     */
    private void setFieldTexts() {
        this.physicalLabel.setText(this.language.translate("physical"));
        this.strengthLabel.setText(this.language.translate("strength"));
        this.dexterityLabel.setText(this.language.translate("dexterity"));
        this.staminaLabel.setText(this.language.translate("stamina"));

        this.socialLabel.setText(this.language.translate("social"));
        this.charismaLabel.setText(this.language.translate("charisma"));
        this.manipulationLabel.setText(this.language.translate("manipulation"));
        this.appearanceLabel.setText(this.language.translate("appearance"));

        this.mentalLabel.setText(this.language.translate("mental"));
        this.intelligenceLabel.setText(this.language.translate("intelligence"));
        this.perceptionLabel.setText(this.language.translate("perception"));
        this.witsLabel.setText(this.language.translate("wits"));

        this.nextButton.setText(this.language.translate("next"));
        this.backButton.setText(this.language.translate("back"));
    }

    /**
     * Create the focus traversal policy for the attributes tab.
     */
    private void createFocusTraversalPolicy() {
        Vector<Component> order = new Vector<>();
        order.add(this.physicalWeightingComboBox);
        order.add(this.socialWeightingComboBox);
        order.add(this.mentalWeightingComboBox);
        order.add(this.strengthField);
        order.add(this.dexterityField);
        order.add(this.staminaField);
        order.add(this.charismaField);
        order.add(this.appearanceField);
        order.add(this.manipulationField);
        order.add(this.intelligenceField);
        order.add(this.perceptionField);
        order.add(this.witsField);
        order.add(this.backButton);
        order.add(this.nextButton);
        this.setFocusTraversalPolicy(new NewCharacterFocusTraversalPolicy(order));
        this.setFocusTraversalPolicyProvider(true);
    }

    /**
     * Switch the selection for the combo box with the same value to the
     * remaining value.
     * The first combo box will be treated as the one the change was made on.
     *
     * @param first
     * @param second
     * @param third
     */
    private void switchWeightings(JComboBox first, JComboBox second, JComboBox third) {
        Weighting firstSelection = (Weighting) first.getSelectedItem();
        Weighting secondSelection = (Weighting) second.getSelectedItem();
        Weighting thirdSelection = (Weighting) third.getSelectedItem();

        if (firstSelection.equals(secondSelection)) {
            second.setSelectedItem(Weighting.getRemaining(firstSelection, thirdSelection));
        } else if (firstSelection.equals(thirdSelection)) {
            third.setSelectedItem(Weighting.getRemaining(firstSelection, secondSelection));
        }
    }

    /**
     * Create the attributes document listener.
     *
     * @return
     */
    private ComponentChangeListener createChangeListener() {
        return new ComponentChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                if (this.getComponent().equals(strengthField)
                    || this.getComponent().equals(dexterityField)
                    || this.getComponent().equals(staminaField)
                ) {
                    calculateUsedPhysicalPoints();
                } else if (this.getComponent().equals(charismaField)
                    || this.getComponent().equals(manipulationField)
                    || this.getComponent().equals(appearanceField)
                ) {
                    calculateUsedSocialPoints();
                } else if (this.getComponent().equals(intelligenceField)
                    || this.getComponent().equals(perceptionField)
                    || this.getComponent().equals(witsField)
                ) {
                    calculateUsedMentalPoints();
                }

                checkAttributesFilled();
                parent.calculateUsedFreeAdditionalPoints();
            }
        };
    }

    /**
     * Add a change listener to the given spinner.
     *
     * @param field
     */
    private void addChangeListener(JSpinner field) {
        ComponentChangeListener attributesListener = this.createChangeListener();
        attributesListener.setComponent(field);
        DefaultFormatter attributesFormatter = (DefaultFormatter) ((JSpinner.DefaultEditor) field.getEditor()).getTextField().getFormatter();
        attributesFormatter.setCommitsOnValidEdit(true);
        field.addChangeListener(attributesListener);
    }

    /**
     * Calculate the used physical attribute points.
     */
    private void calculateUsedPhysicalPoints() {
        int sum = this.getPhysicalPointsSum();

        if (this.checkPhysicalPoints()) {
            this.physicalPointsTextField.setText(
                Integer.toString(this.getPhysicalMaxPoints())
            );
        } else {
            this.physicalPointsTextField.setText(Integer.toString(sum));
        }
    }

    /**
     * Calculate and return the sum of points spent for physical attributes.
     *
     * @return
     */
    public int getPhysicalPointsSum() {
        int strength = Integer.parseInt(this.strengthField.getValue().toString());
        int dexterity = Integer.parseInt(this.dexterityField.getValue().toString());
        int stamina = Integer.parseInt(this.staminaField.getValue().toString());

        // Substract 1 for each attribute, as the minimum is 1.
        return strength + dexterity + stamina - 3;
    }

    /**
     * Check if the spent points for physical attributes is above its maximum.
     *
     * @return
     */
    public boolean checkPhysicalPoints() {
        return this.getPhysicalPointsSum() > this.getPhysicalMaxPoints();
    }

    /**
     * Get the maximum points available for physical attributes.
     *
     * @return
     */
    public int getPhysicalMaxPoints() {
        return Integer.parseInt(this.physicalMaxPointsTextField.getText());
    }

    /**
     * Calculate the used social attribute points.
     */
    private void calculateUsedSocialPoints() {
        int sum = this.getSocialPointsSum();

        if (this.checkSocialPoints()) {
            this.socialPointsTextField.setText(
                Integer.toString(this.getSocialMaxPoints())
            );
        } else {
            this.socialPointsTextField.setText(Integer.toString(sum));
        }
    }

    /**
     * Calculate and return the sum of points spent for social attributes.
     *
     * @return
     */
    public int getSocialPointsSum() {
        int charisma = Integer.parseInt(this.charismaField.getValue().toString());
        int appearance = Integer.parseInt(this.appearanceField.getValue().toString());
        int manipulation = Integer.parseInt(this.manipulationField.getValue().toString());

        // Substract 1 for each attribute, as the minimum is 1.
        return charisma + appearance + manipulation - 3;
    }

    /**
     * Check if the spent points for social attributes is above its maximum.
     *
     * @return
     */
    public boolean checkSocialPoints() {
        return this.getSocialPointsSum() > this.getSocialMaxPoints();
    }

    /**
     * Get the maximum points available for social attributes.
     *
     * @return
     */
    public int getSocialMaxPoints() {
        return Integer.parseInt(this.socialMaxPointsTextField.getText());
    }

    /**
     * Calculate the used physical attribute points.
     */
    private void calculateUsedMentalPoints() {
        int sum = this.getMentalPointsSum();

        if (this.checkMentalPoints()) {
            this.mentalPointsTextField.setText(
                Integer.toString(this.getMentalMaxPoints())
            );
        } else {
            this.mentalPointsTextField.setText(Integer.toString(sum));
        }
    }

    /**
     * Calculate and return the sum of points spent for mental attributes.
     *
     * @return
     */
    public int getMentalPointsSum() {
        int intelligence = Integer.parseInt(this.intelligenceField.getValue().toString());
        int perception = Integer.parseInt(this.perceptionField.getValue().toString());
        int wits = Integer.parseInt(this.witsField.getValue().toString());

        // Substract 1 for each attribute, as the minimum is 1.
        return intelligence + perception + wits - 3;
    }

    /**
     * Check if the spent points for mental attributes is above its maximum.
     *
     * @return
     */
    public boolean checkMentalPoints() {
        return this.getSocialPointsSum() > this.getMentalMaxPoints();
    }

    /**
     * Get the maximum points available for mental attributes.
     *
     * @return
     */
    public int getMentalMaxPoints() {
        return Integer.parseInt(this.mentalMaxPointsTextField.getText());
    }

    /**
     * Set the spinner field maximum value.
     *
     * @param field
     * @param maximum
     */
    private void setFieldMaximum(JSpinner field, int maximum) {
        int value = Integer.parseInt(field.getValue().toString());
        int minimum = Integer.parseInt(
            ((SpinnerNumberModel) field.getModel()).getMinimum().toString()
        );
        field.setModel(
            new SpinnerNumberModel(
                value > maximum ? maximum : value,
                minimum,
                maximum,
                1
            )
        );
    }

    /**
     * Set the maximum value for the attribute spinners.
     *
     * @param maximum
     */
    public void setAttributeMaximum(int maximum) {
        this.setFieldMaximum(this.strengthField, maximum);
        this.setFieldMaximum(this.dexterityField, maximum);
        this.setFieldMaximum(this.staminaField, maximum);
        this.setFieldMaximum(this.charismaField, maximum);
        this.setFieldMaximum(this.appearanceField, maximum);
        this.setFieldMaximum(this.manipulationField, maximum);
        this.setFieldMaximum(this.intelligenceField, maximum);
        this.setFieldMaximum(this.perceptionField, maximum);
        this.setFieldMaximum(this.witsField, maximum);

        this.calculateUsedPhysicalPoints();
        this.calculateUsedSocialPoints();
        this.calculateUsedMentalPoints();
    }

    /**
     * Check if every attribute has been set.
     */
    private void checkAttributesFilled() {
        int physicalSum = this.getPhysicalPointsSum();
        int physicalMax = this.getPhysicalMaxPoints();
        int socialSum = this.getSocialPointsSum();
        int socialMax = this.getSocialMaxPoints();
        int mentalSum = this.getMentalPointsSum();
        int mentalMax = this.getMentalMaxPoints();

        if (physicalSum >= physicalMax
            && socialSum >= socialMax
            && mentalSum >= mentalMax
            && this.parent.getMaxActiveTab() < 2
        ) {
            this.parent.increaseMaxActiveTab();
            this.parent.getCharacterTabPane().setEnabledAt(
                this.parent.getMaxActiveTab(), true
            );
            this.nextButton.setEnabled(true);
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner appearanceField;
    private javax.swing.JLabel appearanceLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JSpinner charismaField;
    private javax.swing.JLabel charismaLabel;
    private javax.swing.JSpinner dexterityField;
    private javax.swing.JLabel dexterityLabel;
    private javax.swing.JSpinner intelligenceField;
    private javax.swing.JLabel intelligenceLabel;
    private javax.swing.JSpinner manipulationField;
    private javax.swing.JLabel manipulationLabel;
    private javax.swing.JLabel mentalLabel;
    private javax.swing.JTextField mentalMaxPointsTextField;
    private javax.swing.JTextField mentalPointsTextField;
    private javax.swing.JComboBox<String> mentalWeightingComboBox;
    private javax.swing.JButton nextButton;
    private javax.swing.JSpinner perceptionField;
    private javax.swing.JLabel perceptionLabel;
    private javax.swing.JLabel physicalLabel;
    private javax.swing.JTextField physicalMaxPointsTextField;
    private javax.swing.JTextField physicalPointsTextField;
    private javax.swing.JComboBox<String> physicalWeightingComboBox;
    private javax.swing.JLabel socialLabel;
    private javax.swing.JTextField socialMaxPointsTextField;
    private javax.swing.JTextField socialPointsTextField;
    private javax.swing.JComboBox<String> socialWeightingComboBox;
    private javax.swing.JSpinner staminaField;
    private javax.swing.JLabel staminaLabel;
    private javax.swing.JSpinner strengthField;
    private javax.swing.JLabel strengthLabel;
    private javax.swing.JSpinner witsField;
    private javax.swing.JLabel witsLabel;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
